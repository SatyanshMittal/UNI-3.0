//@ts-nocheck
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/y9KcE6B4oCE
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardDescription, CardTitle, CardContent } from "@/components/ui/card"
import { ResponsiveLine } from "@nivo/line"

export function WorkshopPanle() {
  const [selectedDateRange, setSelectedDateRange] = useState({
    startDate: new Date("2023-01-01"),
    endDate: new Date("2023-12-31"),
  })
  const [selectedWorkshop, setSelectedWorkshop] = useState(null)
  const workshops = [
    {
      id: 1,
      title: "Introduction to Aptos",
      views: 2500,
      clicks: 1200,
      likes: 500,
      shares: 100,
      comments: 50,
      createdAt: new Date("2023-03-01"),
    },
    {
      id: 2,
      title: "Introduction to Solidity",
      views: 1800,
      clicks: 900,
      likes: 300,
      shares: 80,
      comments: 30,
      createdAt: new Date("2023-05-15"),
    },
    {
      id: 3,
      title: "Mastering DeFi",
      views: 3000,
      clicks: 1500,
      likes: 700,
      shares: 150,
      comments: 80,
      createdAt: new Date("2023-09-01"),
    },
    {
      id: 4,
      title: "Building DAO",
      views: 2200,
      clicks: 1100,
      likes: 400,
      shares: 90,
      comments: 40,
      createdAt: new Date("2023-11-01"),
    },
  ]
  const filteredWorkshops = useMemo(() => {
    return workshops.filter((workshop) => {
      const createdAt = new Date(workshop.createdAt)
      return createdAt >= selectedDateRange.startDate && createdAt <= selectedDateRange.endDate
    })
  }, [selectedDateRange])
  const handleDateRangeChange = (range) => {
    setSelectedDateRange(range)
  }
  const handleWorkshopSelect = (workshop) => {
    setSelectedWorkshop(workshop)
  }
  return (
    <div className="flex flex-col h-screen">
      <header className="bg-background border-b px-6 py-4 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Workshop Engagement</h1>
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" className="flex items-center gap-2">
              <CalendarClockIcon className="h-4 w-4" />
              <span>
                {selectedDateRange.startDate.toLocaleDateString()} -{selectedDateRange.endDate.toLocaleDateString()}
              </span>
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[400px] p-4">
            <div />
          </PopoverContent>
        </Popover>
      </header>
      <div className="flex-1 grid grid-cols-[280px_1fr] gap-6 p-6">
        <div className="bg-background rounded-lg shadow-md p-6">
          <h2 className="text-lg font-bold mb-4">Workshops</h2>
          <ul className="space-y-2">
            {filteredWorkshops.map((workshop) => (
              <li
                key={workshop.id}
                className={`cursor-pointer rounded-md px-4 py-2 transition-colors ${
                  selectedWorkshop?.id === workshop.id ? "bg-primary text-primary-foreground" : "hover:bg-muted"
                }`}
                onClick={() => handleWorkshopSelect(workshop)}
              >
                {workshop.title}
              </li>
            ))}
          </ul>
        </div>
        <div className="bg-background rounded-lg shadow-md p-6">
          {selectedWorkshop ? (
            <div>
              <h2 className="text-lg font-bold mb-4">{selectedWorkshop.title} Engagement</h2>
              <div className="grid grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardDescription>Views</CardDescription>
                    <CardTitle>{selectedWorkshop.views}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <TimeseriesChart className="aspect-[4/3]" />
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardDescription>Clicks</CardDescription>
                    <CardTitle>{selectedWorkshop.clicks}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <TimeseriesChart className="aspect-[4/3]" />
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardDescription>Likes</CardDescription>
                    <CardTitle>{selectedWorkshop.likes}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <LineChart className="aspect-[4/3]" />
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardDescription>Shares</CardDescription>
                    <CardTitle>{selectedWorkshop.shares}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <LineChart className="aspect-[4/3]" />
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardDescription>Comments</CardDescription>
                    <CardTitle>{selectedWorkshop.comments}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <LineChart className="aspect-[4/3]" />
                  </CardContent>
                </Card>
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-center h-full">
              <p className="text-muted-foreground">Select a workshop to view its engagement metrics.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

function CalendarClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5" />
      <path d="M16 2v4" />
      <path d="M8 2v4" />
      <path d="M3 10h5" />
      <path d="M17.5 17.5 16 16.3V14" />
      <circle cx="16" cy="16" r="6" />
    </svg>
  )
}


function LineChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}


function TimeseriesChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "2018-01-01", y: 7 },
              { x: "2018-01-02", y: 5 },
              { x: "2018-01-03", y: 11 },
              { x: "2018-01-04", y: 9 },
              { x: "2018-01-05", y: 12 },
              { x: "2018-01-06", y: 16 },
              { x: "2018-01-07", y: 13 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "2018-01-01", y: 9 },
              { x: "2018-01-02", y: 8 },
              { x: "2018-01-03", y: 13 },
              { x: "2018-01-04", y: 6 },
              { x: "2018-01-05", y: 8 },
              { x: "2018-01-06", y: 14 },
              { x: "2018-01-07", y: 11 },
            ],
          },
        ]}
        margin={{ top: 10, right: 20, bottom: 40, left: 40 }}
        xScale={{
          type: "time",
          format: "%Y-%m-%d",
          useUTC: false,
          precision: "day",
        }}
        xFormat="time:%Y-%m-%d"
        yScale={{
          type: "linear",
          min: 0,
          max: "auto",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
          format: "%d",
          tickValues: "every 1 day",
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}
